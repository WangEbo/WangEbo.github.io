{"meta":{"title":"王毅博的blog","subtitle":"源于热爱","description":"认知与成长","author":"王毅博","url":"http://yoursite.com"},"pages":[],"posts":[{"title":"Vue双向绑定详解","slug":"Vue双向绑定详解","date":"2018-05-27T12:56:08.000Z","updated":"2018-05-27T13:17:31.850Z","comments":true,"path":"2018/05/27/Vue双向绑定详解/","link":"","permalink":"http://yoursite.com/2018/05/27/Vue双向绑定详解/","excerpt":"","text":"了解前提 访问器属性、DocumentFragment、订阅/发布模式（subscribe&amp;publish） 访问器属性 [[Configurable]]:定义属性是否使用obj.delete删除属性，可否修改 [[Enumerable]]：定义能否用for in 遍历，是否可枚举 [[Get]]：在读取属性时，调用的函数，默认为undefined [[Set]]：在写入属性时，调用的函数，默认为undefined 12345 var obj = &#123; &#125;; Object.defineProperty(obj, &quot;hello&quot;, &#123; get: function () &#123;return sth&#125;, set: function (val) &#123;/* do sth */&#125;&#125;) get 和 set 方法内部的 this 都指向 obj，这意味着 get 和 set 函数可以操作对象内部的值。另外，访问器属性的会”覆盖”同名的普通属性，因为访问器属性会被优先访问，与其同名的普通属性则会被忽略。 极简的双线绑定实现1234567891011121314151617&lt;body&gt; &lt;input type=&quot;text&quot; name=&quot;&quot; id=&quot;a&quot;&gt; &lt;span id=&quot;d&quot;&gt;&lt;/span&gt;&lt;/body&gt;&lt;script&gt;var obj=&#123;&#125;Object.defineProperty(obj,&apos;hello&apos;,&#123; set :function(newVal)&#123; document.getElementById(&apos;a&apos;).value=newVal document.getElementById(&apos;b&apos;).innerHTML=newVal &#125;&#125;)document.addEventListener(&apos;keyup&apos;,function (e)&#123; obj.hello=e.target.value&#125;)&lt;/script&gt; 歇会儿","categories":[],"tags":[{"name":"js","slug":"js","permalink":"http://yoursite.com/tags/js/"},{"name":"Vue","slug":"Vue","permalink":"http://yoursite.com/tags/Vue/"}]},{"title":"Virtual Dom的前世今生","slug":"Virtual-Dom的前世今生","date":"2018-04-01T12:56:55.000Z","updated":"2018-05-27T13:07:25.055Z","comments":true,"path":"2018/04/01/Virtual-Dom的前世今生/","link":"","permalink":"http://yoursite.com/2018/04/01/Virtual-Dom的前世今生/","excerpt":"","text":"起源 前端开发过程中，对性能产生最大影响的因素莫过于DOM的重排重绘了，为了有效解决DOM更新开销的问题，采用了Virtual DOM的思路，不仅提升了DOM操作的效率，更推动了数据驱动式组件开发的形成与完善 Virtual Dom的核心思想 事实上，要提高Dom的更改性能，无法就是省去不必要的操作 因此：VirtualDOM的主要思想就是模拟DOM的树状结构，在由于交互等原因需要操作DOM时，先在虚拟DOM完成所有操作，然后通过对节点数据进行diff后得到差异结果后，再一次性对DOM进行批量更新操作 ​ 因此，性能上基本决定于Diff效率 懒癌犯了：掘金上的分享","categories":[],"tags":[{"name":"Vue","slug":"Vue","permalink":"http://yoursite.com/tags/Vue/"},{"name":"Dom","slug":"Dom","permalink":"http://yoursite.com/tags/Dom/"},{"name":"性能优化","slug":"性能优化","permalink":"http://yoursite.com/tags/性能优化/"}]},{"title":"ES6","slug":"ES6","date":"2018-03-15T11:57:49.000Z","updated":"2018-05-27T12:55:11.437Z","comments":true,"path":"2018/03/15/ES6/","link":"","permalink":"http://yoursite.com/2018/03/15/ES6/","excerpt":"","text":"let &amp;&amp; const let let 与 var 的声明用法相同，但是多了一个临时死区(Temporal Distonrtion Zone)的概念 1234console.log(a) // -&gt; undefinedvar a=1console.log(b) // -&gt; Uncaught ReferenceError: b is not definedlet b=2 可以发现声明时使用let时，在声明前打印会报错，事实上，这解决了JS一些奇怪的问题，并且，let会生成一个块级作用域，作用域之外不能访问该变量 12345678910111213141516171819202122232425&#123; let a=1 var b=2 console.log(a) // -&gt;1 console.log(b) // -&gt;2 &#125; console.log(b) // -&gt;Uncaught ReferenceError: b is not defined console.log(a) // -&gt;1 // -&gt;可以发现let声明的变量是有&apos;&#123;&#125;&apos;块级作用域的 // -&gt;这也是为什么使用let可以解决for循环中存在任务队列时常常会发生我们预想之外的结果for(var i=0;i&lt;5;i++)&#123; setTimeout(function()&#123; console.log(i) &#125;,200)&#125;//由于js单线程 任务队列 +事件队列的执行机制，主线程会将延时打印任务放入任务队列中，而主线程执行完后，i已//经是5了// -&gt; 5 5 5 5 5 for(let i=0;i&lt;5;i++)&#123; setTimeout(function()&#123; console.log(i) &#125;,200)&#125;// -&gt; 0 1 2 3 4//由于产生了块级作用域，即便是任务队列中的定时打印，访问到的i也是其作用域内的i ，分别为0 1 2 3 4 const const 与 let 基本相似，只是用const声明必须赋值，并且不得修改绑定（修改指针） 1234const a=1a=2 // -&gt; Uncaught TypeError: Assignment to constant variableconst b=&#123;a:1&#125;b.a=2 //正常执行 另外：有办法使绑定严格不得更改 12const b = Object.freeze(&#123;a: 1&#125;)b.a = 2 // 没有报错，但是 b.a 没有被改 字符串相关 新增函数 includes() endsWith() startsWith() 1234let string = &apos;startend&apos;string.includes(&apos;a&apos;) // -&gt; true 是否包含string.endsWith(&apos;end&apos;) // -&gt; true 是否由 end 结尾string.startsWith(&apos;start&apos;) // -&gt; true 是否由 start 开头 模板字符串 模板字符串中可换行 12345678let s=`start换行end`console.log(s) ////start//换行//end 占位符 12let s = &apos;string&apos;let message = `start$&#123;s&#125;` // -&gt; startstring 解构赋值 数组的结构赋值 1234567891011//解构let [a,b,c]=[1,2,3]console.log(a,b,c) //1,2,3//设置默认值let [a=0,b,c]=[,2,3]console.log(a,b,c) //0,2,3//没有设置的值为undefinedlet [a=0,b,c]=[4,5,]console.log(a,b,c) //4,5,undefined 对象的解构赋值 123456789101112131415let &#123;name,age&#125;=&#123;name:&apos;zxx&apos;,age:18&#125;console.log(name,age) //zxx 18//顺序无关let &#123;name:tag,age&#125;=&#123;age:18,name:&apos;zxx&apos;&#125;console.log(name,age) //zxx 18//设置属性别名 一旦设置了别名，原来的名字就无效了let &#123;name:tag.age&#125; =&#123;age:18,name:&apos;zxx&apos;&#125;console.log(name,age) //ReFerenceError：name is not definedconsole.log(tag,age) //zxx 18//解构赋值时设置默认值let &#123;name;tag=&apos;zxx&apos;,age&#125;=&#123;age:18&#125;console.log(tag,age) //zxx 18 对象相关与扩展运算符 新增方法Same-value equality 同值相等，真·严格相等—-Object.is() 123456Object.is(NaN, NaN) // -&gt;true// 结果基本于 === 相似，除了 NaN 和 +0 -0Object.is(+0, -0) // -&gt; falselet o = &#123;a: 1&#125;let a = Object.assign(&#123;&#125;, o) // -&gt; &#123;a: 1&#125;// 第一个参数为目标参数，后面的参数是不定的，参数属性名如果有重复，后面的会覆盖之前的 对象属性相关 12345678910let a = 1// 当 key 和 value 名字相同时可以简写let b = &#123; a &#125;// 对象中的方法也可以简写let a = &#123;init() &#123;&#125;&#125;// 对象属性名也可以计算 let name = &apos;name&apos;b[name + &apos;1&apos;] = 2 // === b[&apos;name1&apos;] = 2 函数相关 参数默认值 123function fn(a = 1, b = 2) &#123;&#125;// 默认值也可以通过调用函数获得，注意必须调用函数function fn1(a = 1, b = fn()) &#123;&#125; 参数的解构赋值 123456function f(&#123;name,age&#125;)&#123; console.log(name,age)&#125;f() //typeError:Cannot match against &apos;undefined&apos; or &apos;null&apos;f(&#123;&#125;) //undefined,undefinedf(&#123;name:&apos;zxx&apos;,age:18&#125;) //zxx 18 扩展运算符 1234567let array = [1, 2, 3]console.log(...array) // -&gt; 1 2 3// 该语法可以解决之前很多地方只能传入单个参数，只能使用 apply 解决的问题Array.prototype.unshift.apply([4, 5], array) // -&gt; [1, 2, 3, 4, 5]// 现在可以直接这样写[4, 5].unshift(...array)// 展开运算不受不定参数的条件限制，可以一起用 rest 剩余参数 1234funtion f(a,...args)&#123; console.log(a,args)&#125;f(1,2,3) //1 [2,3] 箭头函数 1234567891011// 最简单的写法，只有一个参数，单行表达式value =&gt; value// 多个参数需要使用小括号包裹(v1, v2) =&gt; v2 + v1// 没有参数需要使用小括号包裹() =&gt; &quot;balabala&quot;// 多行表达式需要大括号包裹(v1, v2) =&gt; &#123; let v3= v1 + v2 return v3&#125; Set和Map Set： 是新增的无重复的有序集合，多用于集合去重或者判断集合中是否含有某个元素。 123456789101112131415// 创建let set = new Set()// 添加元素set.add(1)set.add(&apos;1&apos;)// 重复的元素不会被添加set.add(1)// 判断是否包含元素set.has(1) // -&gt; true// 判断长度set.size() // -&gt; 2// 删除某个元素set.delete()// 移除所有元素set.clear() Map ：是新增的有序键值对列表，键值可以是任何类型。 123456789101112131415// 创建let map = new Map()// 设置键值对map.set(&apos;year&apos;, &quot;2017&quot;)map.set(&#123;&#125;, &apos;obj&apos;)// 取值map.get(&apos;year&apos;) // -&gt; &apos;2017&apos;// 判断是否有该键值map.has(&apos;year&apos;) // -&gt; true// 获得长度map.size() // -&gt; 2// 删除某个键值map.delete(&apos;year&apos;)// 移除所有键值map.clear() 类与继承 JS 中的类不是其他语言中的类，只是个语法糖，写法如下。 123456789101112131415161718192021class Person &#123;// 构造函数 constructor() &#123; this.name = name &#125; sayName() &#123; console.log(this.name) &#125;&#125;let p = new Person(&apos;name&apos;)p.sayName() // -&gt; &apos;name&apos;// class 就是以下代码的语法糖// 对应 constructorfunction Person(name) &#123; this.name = name&#125;// 对应 sayNamePerson.prototype.sayName = function() &#123; console.log(this.name)&#125; 类声明相比之前的写法有以下几点优点 类声明和 let 声明一样，有临时死区 类声明中的代码全部运行在严格模式下 必须使用 new 调用 在 ES6 之前写继承很麻烦，既然有个类，那么必然也可以继承类了 123456789101112131415161718192021222324class Person &#123;// 构造函数constructor() &#123; this.name = name&#125;sayName() &#123; console.log(this.name)&#125;&#125;// extends 代表继承自Personclass Student extends Person &#123;constructor(name, age) &#123;// super 的注意事项之前有说过 super(name) // 必须在 super 之后调用 this this.age = age&#125;sayName() &#123;// 如果像使用父类的方法就使用这个方法使用// 不像使用的话就不写 super，会覆盖掉父类的方法 super.sayName(this.name) console.log(this.age)&#125;&#125; Promise Promise :一个构造函数，在 new操作符创建实例使，即创建了一个异步操作 Promise有三个状态 pending，等待状态，也就是既不是 resolve 也不是 reject 状态 fulfilled，resolve 以后进入这个状态 reject，reject 以后进入这个状态 由于异步操作后我们只能拿到res又或err，因此开发人员在创建Promise实例时，就要使用Promise.prototype上的.then方法为它定义resolve和reject回调函数·，用法： 123456789101112131415161718192021// 1. 创建promise实例,在实例中执行异步操作(比如发送网络请求)// 2. 异步操作成功时,调用reslove函数传递数据// 3. 异步操作失败时,调用reject函数传递错误信息const promise = new Promise(function(resolve, reject) &#123; // 异步操作 // ... if (/* 异步操作成功 */)&#123; resolve(value); &#125; else &#123; reject(error); &#125;&#125;); // 4. 使用promise实例then方法接收reslove或reject返回的数据promise.then(function(value) &#123; // 此处数据即为reslove回来的数据 // success&#125;, function(error) &#123; // 此处数据即为reject回来的数据 // failure&#125;); Promise解决回调地狱 原理：链式编程 1234567891011121314151617181920212223function fetch(url)&#123; return new Promise(function(reslove,reject)&#123; axios.get(url).then(function(res)&#123; if(res.status == 1)&#123; reslove(res.data) &#125;else&#123; reject(res.error) &#125; &#125;) &#125;)&#125;//then方法内部返回的promise实例reslove或reject出来的对象会在下一个then方法内部得到fetch(&apos;A&apos;).then(function(res)&#123; // A 请求正常 return fetch(&apos;B&apos;) // 这里返回一个新的promise实例,在后面的then中可以得到该实例reslove或reject出来的对象&#125;).then(function(res)&#123; // B 请求正常 return fetch(&apos;C&apos;)&#125;).then(function(res)&#123; // C 请求正常 // 请求完毕&#125;) Promise中捕获异常 可以在每一个.then(resolve,reject)中定义一个reject 失败后的处理函数 Promise中也提供了catch方法，Promise.then().catch(err=&gt;{console.log(err.message)})可以在每一个异步操作出错时 抛出异常 Promise处理多个请同时发送，而需要数据合并渲染 Promise的 all方法可将多个Promise实例包装成一个新的Promise实例 12345678910111213141516171819function fetch(url)&#123; return new Promise(function(reslove,reject)&#123; axios.get(url).then(function(res)&#123; if(res.status == 1)&#123; reslove(res.data) &#125;else&#123; reject(res.error) &#125; &#125;) &#125;)&#125;const p1 = fetch(&apos;A&apos;)const p2 = fetch(&apos;B&apos;)const p3 = fetch(&apos;C&apos;)const p = Promise.all([p1, p2, p3]);p.then(function(res)&#123; // res是一个数组,存放着p1,p2,p3的返回值&#125;) 模块化 模块化是指将不同功能的js代码分开管理,常用于功能与数据封装 其好处在于代码管理方便，便于维护，适合团队开发 123456789101112131415161718192021222324252627// example.js 文件下// export 可以导出任何变量，函数或者类export var age = 14export function sum(n1, n2) &#123; return n1 + n2&#125;export class Person &#123; constructor(age) &#123; this.age = age &#125;&#125;// 别的 JS 文件中导入// 如果想导入整个模块并且自己命名，就可以这样使用// import 后面代表模块名，from 后面代表要导入的文件地址import * as Example from &apos;./example&apos;console.log(Example.age) // -&gt; 14// 当然你也可以只使用模块中的一个功能// 这里使用了对象解构的方法拿到需要的功能，注意这里名字必须相同，否则使用会报错import &#123; age, sum &#125; from &apos;./example&apos;console.log(age) // -&gt; 14console.log(sum(1, 2)) // -&gt; 3// 现在我只想导出一个功能，并且外部可以随便命名该如何做呢？// default 一个文件中只能使用一次export default var age = 14// MyAge 可以随便自己喜欢命名import MyAge from &apos;./example&apos;console.log(MyAge) // -&gt; 14 ​","categories":[],"tags":[{"name":"js","slug":"js","permalink":"http://yoursite.com/tags/js/"},{"name":"ES6","slug":"ES6","permalink":"http://yoursite.com/tags/ES6/"}]},{"title":"闭包","slug":"闭包","date":"2017-07-29T15:55:02.000Z","updated":"2018-05-27T05:19:49.688Z","comments":true,"path":"2017/07/29/闭包/","link":"","permalink":"http://yoursite.com/2017/07/29/闭包/","excerpt":"","text":"在红宝书中是这样讲述闭包的： 有权访问另一个函数作用域内变量的函数 在《你不知道的JavaScript》中是这样描述的：当函数可以记住并访问所在的词法作用域时，就产生了闭包，即使函数是在当前词法作用域之外执行。 讲解闭包​ 先看一段代码 12345678function fn1() &#123; var name = &apos;iceman&apos;; function fn2() &#123; console.log(name); &#125; fn2();&#125;fn1(); 根据高程及权威指南的描述，上面代码已经形成了闭包，只是不太好观察 ​ 那么再看下面一段代码 123456789function fn1() &#123; var name = &apos;iceman&apos;; function fn2() &#123; console.log(name); &#125; return fn2;&#125;var fn3 = fn1();fn3(); 这就很清晰的展示了闭包 fn2的词法作用域能够访问到fn1的作用域 将fn2当做fn1返回值 fn1执行后，将fn2的引用赋值给fn3 执行fn3，输出变量name 正常来讲，当fn1函数执行完后，其作用域会被销毁，然后垃圾回收器会释放那段内存空间，但是闭包却神奇的让fn1的作用域存活了下来，是因为fn2依然次有该作用域的引用，而这个引用就是闭包 需要注意的是：对函数值的传递还可以使用其他方式诸如回调函数的形式 1234567891011function fn1() &#123; var name = &apos;iceman&apos;; function fn2() &#123; console.log(name); &#125; fn3(fn2);&#125;function fn3(fn) &#123; fn();&#125;fn1(); 在上例中，将fn1内部的fn2传参的形式传递给fn3，当它在fn3中被运行时，它依然可以访问到name变量 因此无论通过哪种方式将内部的函数传递到所在的词法作用域外，它都次有对原始作用域的引用，无论在何处执行，这个函数都会触发闭包 实例分析以上的例子会让人觉得有点学院派了，但是闭包绝不仅仅是一个无用的概念，你写过的代码当中肯定有闭包的身影，比如类似如下的代码： 123456function waitSomeTime(msg, time) &#123; setTimeout(function () &#123; console.log(msg) &#125;, time);&#125;waitSomeTime(&apos;hello&apos;, 1000); 定时器中有一个匿名函数，该匿名函数就有涵盖waitSomeTime函数作用域的闭包，因此当1秒之后，该匿名函数能输出msg。 另一个很经典的例子就是for循环中使用定时器延迟打印的问题： 12345for (var i = 1; i &lt;= 10; i++) &#123; setTimeout(function () &#123; console.log(i); &#125;, 1000);&#125; 在这段代码中，我们对其的预期是输出1~10，但却输出10次11。这是因为setTimeout中的匿名函数执行的时候，for循环都已经结束了，for循环结束的条件是i大于10，所以当然是输出10次11咯。 究其原因：i是声明在全局作用中的，定时器中的匿名函数也是执行在全局作用域中，那当然是每次都输出11了。 原因知道了，解决起来就简单了，我们可以让i在每次迭代的时候，都产生一个私有的作用域，在这个私有的作用域中保存当前i的值。 12345678for (var i = 1; i &lt;= 10; i++) &#123; (function () &#123; var j = i; setTimeout(function () &#123; console.log(j); &#125;, 1000); &#125;)();&#125; 这样就达到我们的预期了呀，让我们用一种比较优雅的写法改造一些，将每次迭代的i作为实参传递给自执行函数，自执行函数中用变量去接收： 1234567for (var i = 1; i &lt;= 10; i++) &#123; (function (j) &#123; setTimeout(function () &#123; console.log(j); &#125;, 1000); &#125;)(i);&#125; 闭包的应用： 定义私有变量，避免全局污染 123456789101112131415161718192021222324function module() &#123; var arr = []; function add(val) &#123; if (typeof val == &apos;number&apos;) &#123; arr.push(val); &#125; &#125; function get(index) &#123; if (index &lt; arr.length) &#123; return arr[index] &#125; else &#123; return null; &#125; &#125; return &#123; add: add, get: get &#125;&#125;var mod1 = module();mod1.add(1);mod1.add(2);mod1.add(&apos;xxx&apos;);console.log(mod1.get(2));","categories":[],"tags":[{"name":"闭包","slug":"闭包","permalink":"http://yoursite.com/tags/闭包/"},{"name":"作用域","slug":"作用域","permalink":"http://yoursite.com/tags/作用域/"},{"name":"作用域链","slug":"作用域链","permalink":"http://yoursite.com/tags/作用域链/"}]},{"title":"数组去重","slug":"数组去重","date":"2017-07-29T15:05:46.000Z","updated":"2018-05-27T04:57:49.131Z","comments":true,"path":"2017/07/29/数组去重/","link":"","permalink":"http://yoursite.com/2017/07/29/数组去重/","excerpt":"","text":"思路一，对象的属性的第二种写法 obj.[arr[i]] 1234567891011将数组的value作为一个新的空对象hsah的属性，将其赋值为true，并将value push至空数组result中：function unique(arr)&#123; var result =[],hash = &#123;&#125;; for (var i = 0,len = arr.length; i&lt;len; i++)&#123; if(!hash[arr[i]])&#123; hash[arr[i]] = true; result.push(arr[i]) &#125; &#125; return result;&#125; 思路二:indexOf方法 12345678910111213141516 function unique(arr)&#123; var result = []; for(var i=0; i&lt;arr.length; i++)&#123; if(arr.indexOf(arr[i]) == i)&#123; result.push(arr[i]); &#125; &#125; return result; &#125; 或function unique(arr)&#123; return arr.filter(function (item, index, self) &#123; return self.indexOf(item) === index; &#125;);&#125; ES6–你值得拥有 12345678function unique (arr) &#123; return Array.from(new Set(arr))&#125;function unique (arr) &#123; const seen = new Map() return arr.filter((a) =&gt; !seen.has(a) &amp;&amp; seen.set(a, 1))&#125;","categories":[],"tags":[{"name":"数组去重","slug":"数组去重","permalink":"http://yoursite.com/tags/数组去重/"}]},{"title":"继承","slug":"继承","date":"2017-05-27T05:00:26.000Z","updated":"2018-05-27T04:56:52.679Z","comments":true,"path":"2017/05/27/继承/","link":"","permalink":"http://yoursite.com/2017/05/27/继承/","excerpt":"","text":"借用构造函数（经典继承） 1234567891011121314151617181920原理：使用call,apply在子类型构造函数内部借用超类型函数function Father(name)&#123; this.name=name this.colors=[&apos;red&apos;,&apos;blue&apos;,&apos;green&apos;]&#125;function Son(name)&#123; Father.call(this,name)&#125;var p1=new Son(&apos;小明&apos;)p1.colors.push(&apos;black&apos;)alert p1.colors //[&apos;red&apos;,&apos;blue&apos;,&apos;green&apos;,&apos;black&apos;]var p2=new Father()alert p2.colors //[&apos;red&apos;,&apos;blue&apos;,&apos;green&apos;]有点： 可传参，原型链上的引用类型独立缺点： 原型上的方法在创建实例时需要重新创建，没有实现函数复用，解决方法：结合用原型链 组合继承（伪经典继承） 123456789101112131415161718192021222324252627282930313233思路：使用原型链实现对原型属性和方法的继承，通过借用构造函数来实现对实例属性的可传参改变function Father(name)&#123; this.name=name this.colors=[&apos;red&apos;,&apos;blue&apos;,&apos;green&apos;]&#125;//子类型的实例可以通过两次查找原型对象至超类型的原型对象来继承超类型的方法Father.prototype.sayName=function()&#123; console.log(this.name)&#125;//通过将子类型构造函数的原型对象指向Father实例来实现超类型的属性继承Son.prototype=new Father()Son.prototype.sayAge=function()&#123; alert(this.age)&#125;function Son(name,age)&#123; Father.call(this,name) this.age=age&#125;var p1=new Son(&apos;小高&apos;,23)p1.colors.push(&apos;black&apos;)console.log(p1.colors) //[&apos;red&apos;,&apos;blue&apos;,&apos;green&apos;,&apos;black&apos;]p1.sayName() //&apos;小高&apos;p1.sayAge //23var p2=new Son(&apos;小高&apos;,8)console.log(p2.colors) //[&apos;red&apos;,&apos;blue&apos;,&apos;green&apos;]p1.sayName() //&apos;小高&apos;p1.sayAge //8优点： 组合继承结合了原型链和借用构造函数的有点，是js中最常用的继承模式，而且instanceof和isPrototypeOf()都 能判断类型缺点： 调用了多次父类构造函数，一次是在创建子类型原型的时候, 另一次是在子类型构造函数内部. 原型式继承 1234567891011121314151617181920212223242526272829303132原型式继承的原理：定义一个函数object，这个构造函数有一个参数o，o将是超类型，在这个构造函数object内部，在object函数内部定义一个临时的构造函数F，然后将o赋值给F.prototype，再返回新创建的f实例对象obj1，如此一来，obj1就可以通过原型链来访问原型对象o的属性function object(o)&#123; var function F()&#123;&#125; F.prototype=o return new F()&#125;var person = &#123; friends : [&quot;Van&quot;,&quot;Louis&quot;,&quot;Nick&quot;]&#125;;var anotherPerson = object(person);anotherPerson.friends.push(&quot;Rob&quot;);var yetAnotherPerson = object(person);yetAnotherPerson.friends.push(&quot;Style&quot;);alert(person.friends);//&quot;Van,Louis,Nick,Rob,Style&quot;同样由于实例对象的friends是引用类型，原型对象中的friends遭到了更改**在ECMAScript5中，通过新增Object.create()方法规范化了上面的原型式继承**支持这个方法的浏览器有IE9+，firefox4+，safari5+，opera12+，chrome1.是要传入的原型对象 2.一个对象，需要定义的属性的配置，与Object.definedPrototy()方法的第二个参数格式相同如：var person=&#123; name:&apos;Van&apos;&#125;var p1=Object.create(person,&#123; name:&#123; value:&apos;louis&apos; &#125;&#125;)alert(anotherPerson.name) //louis 寄生式继承 123456789101112与原型式继承有很大相似，原理：在原型式继承的基础上，创建一个 **仅用于封装继承过程的函数**，该函数在内部来以某种方式增强对象，最后再像真的是它做了所有工作一样返回新对象例如，**在原型式继承的object函数和person对象已存在时**：function createAnother(original)&#123; var clone=object(original) clone.sayhi=function()&#123; console.log(&apos;hi&apos;) &#125; return clone&#125;寄生式继承创建的新对象不仅具有person(original)的所有属性和方法，并且还有sayhi方法，注意：这样来实现继承，会因为不能做到函数复用而导致效率降低 寄生组合式继承 123456789101112131415前面说过，组合继承是最常用的方式了，但是由于每次使用组合继承都会调用两次父类构造函数，因此就有了寄生组合式继承，实现思路： 不必为了指定子类型的原型而调用超类型的构造函数*同样在object函数已存在时*function object(o)&#123; function F()&#123;&#125; F.prototype = o; return new F();&#125;function extend(subClass,superClass)&#123; var prototype=object(superClass.prototype) prototype.constructor=subClass subClass.prototype=prototype&#125;相比组合继承，我们没有多次调用超类构造函数，而且，原型链没有发生改变，让我们看看下图 在寄生式组合继承中，在创建子类实例时（执行 new subCLass()）时，步骤如下 执行object，将F.prototype指向了superClass.prototype，因此之后的new F()的__proto__属性也指向superClass.prototype 用prototype变量来接收new F()，并将prototype的constructor属性指向subCLass 再将subClass.prototype指向prototype，如此，subCLass的实例对象的__proto__属性便也指向了prototype，这样一来，原型链也没有被修改","categories":[],"tags":[{"name":"js","slug":"js","permalink":"http://yoursite.com/tags/js/"},{"name":"原型","slug":"原型","permalink":"http://yoursite.com/tags/原型/"},{"name":"原型链","slug":"原型链","permalink":"http://yoursite.com/tags/原型链/"},{"name":"继承","slug":"继承","permalink":"http://yoursite.com/tags/继承/"},{"name":"call","slug":"call","permalink":"http://yoursite.com/tags/call/"},{"name":"apply","slug":"apply","permalink":"http://yoursite.com/tags/apply/"},{"name":"this","slug":"this","permalink":"http://yoursite.com/tags/this/"}]},{"title":"（instanceof、hasOwnProperty、in）创建对象及检测对象类型","slug":"（instanceof、hasOwnProperty、in）创建对象及检测对象类型","date":"2017-04-20T16:48:28.000Z","updated":"2018-05-27T05:10:02.304Z","comments":true,"path":"2017/04/21/（instanceof、hasOwnProperty、in）创建对象及检测对象类型/","link":"","permalink":"http://yoursite.com/2017/04/21/（instanceof、hasOwnProperty、in）创建对象及检测对象类型/","excerpt":"","text":"对象创建的演变 在将要涉及到面向对象开发之前，我们可能需要创建许多新对象，也许他们有许多共同点，那么这些创建对象的模式是如何演变的呢 instanceof 先了解instanceof person1 instanceof Person 操作符，它用来检测对象类型（实例对象是否是某个‘类‘的实例） hasOwnProperty() hasOwnProperty() obj.hasOwnProperty(&#39;atr_name&#39;)用来检测对象是否自身真正有某个属性，而不是通过原型链访问原型对象的 in操作符 in &quot;atr_name&quot;in obj 操作符在单独使用时，只用来判断对象是够可以读取某一个属性，不论来之自身或是原型链上的原型对象上，能则返回true，反之，返回false 详细解读各种模式及其优缺点 工厂模式 1234567891011121314151617function createPerson(name,age,job)&#123; var o=new Object() o.name=name o.age=age o.job=job o.sayName=function()&#123; console.log(this.name); &#125; return o&#125;var person1=createPerson(&apos;Nicolas&apos;,23,&apos;webber&apos;)var person2=createPerson(&apos;rose&apos;,22,&apos;ui&apos;)达到了需求缺点： - 无法检测对象的类型，因为都是Object - 每次创建一个新对象时，就保存了一个say方法，函数复用没有得到利用（因为有更好的解决办法） 构造函数模式 123456789101112131415161718function Person(name,age,job)&#123; this.name=name this.age=age this.job=job this.sayName=function()&#123; console.log(this.name); &#125; &#125; var person1=Object(&apos;Nicolas&apos;,23,&apos;webber&apos;) var person2=Object(&apos;rose&apos;,22,&apos;ui&apos;) 优点： - 可以通过constructor或instanceof来检测类型 alert(person1.constructor,person1 instanceof Object,person1 instanceof Person) 将输入true true true， 构造函数模式可以为实例对象添加一个特定类型标识，这正是它优于工厂模式的所在 缺点： say方法重复再内存中创建 原型模式 12345678910111213141516 //构造函数来存放简单类型 function Person()&#123;&#125;Person.prototype.name=&apos;Nicolas&apos; Person.prototype.sayName=function()&#123; console.log(this.name); &#125; Person.prototype.friends=[&apos;小明&apos;] var person1=new Person() var person2=Object() 优点： 如此，由于原型的关系，实例对象可以共同访问sayName方法，而this对象又很好的解决了标识符name指 向不同的问题 缺点： 无法传参 如果出现引用问题(下面继承也会讲到)，如：`person1.friends.push(&apos;小红&apos;)` 在执行打印person2.friends时，将会输出[&apos;小明&apos;,&apos;小红&apos;],而这不是我们所希望的结果 组合使用构造函数模式和原型模式 1234567891011121314151617//构造函数来存放简单类型 function Person(name,age,job)&#123; this.name=name this.age=age this.job=job //将可能要变化的引用类型放入构造函数中 this.friends=[&apos;小明&apos;] &#125; Person.prototype.sayName=fucntion()&#123; console.log(this.name); &#125; var person1=Object(&apos;Nicolas&apos;,23,&apos;webber&apos;) var person2=Object(&apos;rose&apos;,22,&apos;ui&apos;) //这是一种广泛认可的开发模式 注意： 通过字面量方式赋值给Person.prototype会导致constructor需要重新手动设置，并且会切断最初原型对象与实例对象之间的联系 动态原型模式 1234567891011121314151617实际上和（组合构造器和原型模式）差不多不过是 function Person(name,age,job)&#123; this.name=name this.age=age this.job=job //将可能要变化的引用类型放入构造函数中 this.friends=[&apos;小明&apos;] //不过只是在构造函数将所需的代码全包含了，而且原型对象的方法也只会在初次使用构造函数的时候添 加一次,当然只需要检测一个属性或者方法即可 if(this.sayName != &apos;function&apos;)&#123; Person.prototype.sayName=function()&#123; alert(this.name) &#125; &#125; &#125; 很完美了，不过.....QAQ，还是不能通过字面重写原型对象 寄生构造函数模式 12345678910111213141516171819202122232425function Person(name,age,job)&#123; var o=new Object() o.name=name o.sayName=function()&#123; console.log(this.name); &#125; return o &#125; var p1=new Person() 它与工厂模式别没有多大区别，只不过，他可以在特殊情况下为对象创建构造函数，如我们需要一个包含特殊方法的Array构造函数， function SpecialArray()&#123; var values=new Array() values.push.apply(values,arguments) //这里不能直接 values.push(arguments)吗 values.toPipedString=function()&#123; return this.join(&apos;|&apos;) &#125; return values &#125; var colors=new SpecialArray(&apos;red&apos;,&apos;blue&apos;,&apos;green) alert(colors.toPipedString) //&apos;red|blue|green&apos; 缺点： 它依然不能解决类型判断问题，instanceof无法解决 /？why ​ 稳妥构造函数模式 12 ​","categories":[],"tags":[{"name":"js","slug":"js","permalink":"http://yoursite.com/tags/js/"},{"name":"Object","slug":"Object","permalink":"http://yoursite.com/tags/Object/"},{"name":"es5","slug":"es5","permalink":"http://yoursite.com/tags/es5/"}]},{"title":"flex布局","slug":"flex布局","date":"2017-03-20T17:11:09.000Z","updated":"2018-05-27T05:07:21.744Z","comments":true,"path":"2017/03/21/flex布局/","link":"","permalink":"http://yoursite.com/2017/03/21/flex布局/","excerpt":"","text":"flex弹性布局，如何容器都能使用display属性指定为flex布局； 概念：采用flex布局的元素，简称“容器”；子容器将自动称为氢气成员（flex item） 容器模型 水平轴（main axis）的起始点(main start)和结束点(main end)；交叉轴(cross axis)的起始点(cross start)以及结束点(cross end)； 注意，设为 Flex 布局以后，子元素的float、clear和vertical-align属性将失效。 项目默认沿主轴排列，单个项目占据的主轴空间叫做main size，占据的交叉轴空间叫做cross size ​ 容器的6个属性 flex-direction flex-wrap flex-flow justify-content align-items align-content 容器属性详解 flex-direction属性决定主轴的方向，也就是排列方向 1234row(默认值)：水平方向左为起点row-reverse：水平方向右为起点column：垂直方向上为起点column-reverse：垂直方向下为起点 flex-wrap属性定义一排排满后如何换行 123nowrap(默认)：不换行wrap：换行，第一行在上方wrap-reverse：换行，第一行在下方 flex-flow属性是flex-direction和flex-wrap的简写形式默认值为 row nowrap 123.box&#123; flex-flow:&lt;flex-direciton&gt;||&lt;flex-wrap&gt;&#125; justify-content属性定义项目在主轴上的对其方式 123451.flex-start(默认值):左对齐2.flex-end：右对齐3.center：居中4.space-between：两端对齐，项目之间的间隔都相等5.space-around：每个项目两侧的间隔相等，因此项目之间的间隔比项目与边框的间隔大一倍 align-items属性定义项目在交叉轴上如何对齐 flex-start：与交叉轴的起点对齐 flex-end：与交叉轴的终点对齐 center：与交叉轴的中点对齐 baseline：项目的第一行文字的基线对齐 stretch：如果项目未设置高度或设为auto，将占满容器的高度 align-content属性定义多根轴线的对齐方式，如果项目只有一根轴线，该属性无效 项目的属性 order：定义项目的排列顺序，数值越小，排列越靠前，默认为0 felx-grow属性：定义项目的放大比例饿，默认为0，即如果存在剩余空间，项目也不放大，如果所有项目的flex-grow属性都为1，则它们将等分剩余空间（如果有的话）。如果一个项目的flex-grow属性为2，其他项目都为1，则前者占据的剩余空间将比其他项多一倍。 flex-shrink属性：定义项目的缩小比例，默认为1，级空间如果不足，则将项目缩小；但是如果一个项目的该属性为0，而其他的都为1，则空间不足时，缩小其他的，前者不缩小 flex-basis：属性定义了在分配多余空间之前，项目占据的主轴空间；浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为auto，即项目的本来大小。 flex：该属性是flex-grow，flex-shrink以及flex-basis的缩写，默认为0 1 auto，后两个属性可选（推荐选用该写法） align-self：属性允许单个项目与其他项目不一样的对齐方式，可以覆盖algin-items的值，默认为auto，表示继承align-items属性，如果没有父元素，则等同于stretch","categories":[],"tags":[{"name":"css","slug":"css","permalink":"http://yoursite.com/tags/css/"},{"name":"布局","slug":"布局","permalink":"http://yoursite.com/tags/布局/"},{"name":"flex","slug":"flex","permalink":"http://yoursite.com/tags/flex/"}]},{"title":"递归与深拷贝","slug":"递归与深拷贝","date":"2017-03-11T12:03:27.000Z","updated":"2018-05-27T05:15:59.761Z","comments":true,"path":"2017/03/11/递归与深拷贝/","link":"","permalink":"http://yoursite.com/2017/03/11/递归与深拷贝/","excerpt":"","text":"递归原理 递归原理：递归原理：函数内部调用函数本身 递归实现 实现深拷贝常用的两种方法： 迭代递归法 序列化反序列化法 如，这是我们的测试对象 123456789101112131415161718let test = &#123; num: 0, str: &apos;&apos;, boolean: true, unf: undefined, nul: null, obj: &#123; name: &apos;我是一个对象&apos;, id: 1 &#125;, arr: [0, 1, 2], func: function() &#123; console.log(&apos;我是一个函数&apos;) &#125;, date: new Date(0), reg: new RegExp(&apos;/我是一个正则/ig&apos;), err: new Error(&apos;我是一个错误&apos;)&#125; 方法一： 123456789101112131415161718// 判断是否为对象function isObject(o) &#123; return (typeof o === &apos;object&apos; || typeof o === &apos;function&apos;) &amp;&amp; o !== null&#125;// 迭代递归法：深拷贝对象与数组function deepClone(obj) &#123; if (!isObject(obj)) &#123; throw new Error(&apos;obj 不是一个对象！&apos;) &#125; let isArray = Array.isArray(obj) let cloneObj = isArray ? [] : &#123;&#125; for (let key in obj) &#123; cloneObj[key] = isObject(obj[key]) ? deepClone(obj[key]) : obj[key] &#125; return cloneObj&#125; 扩展 方法二： 掘金上的分享","categories":[],"tags":[{"name":"函数","slug":"函数","permalink":"http://yoursite.com/tags/函数/"},{"name":"arguments","slug":"arguments","permalink":"http://yoursite.com/tags/arguments/"},{"name":"递归，深拷贝","slug":"递归，深拷贝","permalink":"http://yoursite.com/tags/递归，深拷贝/"}]},{"title":"原型链","slug":"原型链","date":"2017-01-21T16:43:54.000Z","updated":"2018-05-27T05:17:57.738Z","comments":true,"path":"2017/01/22/原型链/","link":"","permalink":"http://yoursite.com/2017/01/22/原型链/","excerpt":"","text":"先看原型你必须知道的概念：无论何时，只要创建了一个新函数，就会根据一组特定的规则 为该函数创建一个prototype属性，这个属性即指向函数的原型对象，并且默认情况下，这个原型对象会自动获得一个constructor属性，这个属性指向这个新函数，因此我们可以通过（如下图Person函数，）Person.prototype来添加属性或方法，而在通过Person创建一个新实例后，实例上有一个[[prototype]]指针指向原型对象，在chrome、Safari、FireFox中可以通过__proto__来访问 原型的一些特点 实例对象可以访问到原型对象中的静态成员（ person1.constructor同样也是访问的原型对象中的） 实例对象中添加的属性如果与原型对象相同，那么则会屏蔽原型对象中的改属性，实例对象单独添加该属性，对原型对象无影响 由于第一条特点的原因，我们有时候需要通过hasOwnProperty来判断实例对象中是否真正含有某一属性 当然为了便捷，ECMAscript5就提供了hasPrototypeProperty方法用来检测实例对象要访问的某属性是否只存在于原型对象而不存在于其自身，语法hasPrototypeProperty(obj,&#39;attr_name&#39;)，返回一个bool值 for-in只能遍历可枚举的属性 原型的动态性（重要特点，栈与堆将非常有助于理解这一特点） 由于实力对象查找原型对象中的属性是一次搜索，因此，我们可以动态的为原型对象添加属性或方法，而后再通过实例对象来访问，如 12345var p1=new Person()Person.prototype.sayHi=function()&#123; alert(&apos;hi&apos;)&#125;friend,sayHi() // &apos;hi&apos; (没有任何问题) 请谨记，实例对象与构造器之间，是没有任何指针的，它是通过原型对象中的constructor属性来访问构造器的，因此，如果我们完全通过Person.prototype完全重写”我们将需要的原型对象”，那么就相当于，我们 切断了最初原型对象与构造器之间的唯一关系，这是因为，通过Person.prototype={}（一个新的对象字面量）的形式，使得构造器Person的prototype属性的指针发生了改变，指向了我们新开辟内存创建的新对象“{}” 123456789101112function Person()&#123;&#125;var p1=new Person()Person.prototype=&#123; constructor:Person //如果需要通过constructor来判断类型，我们需要手动添加这个属性来打到预期 name:&apos;Nicolas&apos;&#125;console.log(friend.name) //error ,由于这是 = 赋值操作符，改变了Person.prototype的指针，指向了内存中的&#123; constructor:Person name:&apos;Nicolas&apos;&#125;这个对象，而p1的[[prototype]]属性是在`var p1=new Person()`这一步操作之后产生的原型对象，而此时的原型对象不包含name属性，因此报错 原生对象的原型 原生对象Array、String、object等都是采用原型模式创建的，因此可以随时给他们添加新方法 原型链","categories":[],"tags":[{"name":"js","slug":"js","permalink":"http://yoursite.com/tags/js/"},{"name":"原型","slug":"原型","permalink":"http://yoursite.com/tags/原型/"},{"name":"原型链","slug":"原型链","permalink":"http://yoursite.com/tags/原型链/"}]},{"title":"html","slug":"html","date":"2016-11-23T07:45:48.000Z","updated":"2018-05-27T04:58:41.699Z","comments":true,"path":"2016/11/23/html/","link":"","permalink":"http://yoursite.com/2016/11/23/html/","excerpt":"","text":"图片与文字组合使用时，如何使图片与文字垂直居中？ 给图片设置vertical-algin:center;并给文字以及其父元素高度相同的行高 什么是bfc？ Block Format Context(块级格式化上下文)，它是一个独立渲染区域，只有Block-level box参与，它规定了内部的Block-level box布局规则，并与这个区域外部毫不相干 inline-block中的空格部分是什么？其实是html中的空白字符；li标签不闭合可以解决中间有间距，浏览器会自动补齐闭合li标签；或者给li添加负的边距； 给父元素font-size：0；也可以清除其中的空白 h5新特性 h5缓存sessionstorage/localstorage/cookie","categories":[],"tags":[{"name":"html","slug":"html","permalink":"http://yoursite.com/tags/html/"},{"name":"h5","slug":"h5","permalink":"http://yoursite.com/tags/h5/"}]},{"title":"css","slug":"css","date":"2016-11-16T16:27:02.000Z","updated":"2018-05-27T04:58:57.526Z","comments":true,"path":"2016/11/17/css/","link":"","permalink":"http://yoursite.com/2016/11/17/css/","excerpt":"","text":"css 可继承的属性有哪些？ 常用的： 字体系列属性：font组合写法，font-weight，font-size，font-style，font-variant，color，text-indent css优先级（权重） !important &gt; id &gt; class &gt; tag important 比 内联优先级高,但内联比 id 要高 css选择器，建议没事去逛逛玩W3Ccss3新特性 border-radius、box-shadow、text-shadow、gradient 变形：transform：rotate | scale | translate | skew 选择器新增： p:first-of-type 选择属于其父元素的首个 元素的每个 元素。 p:last-of-type 选择属于其父元素的最后 元素的每个 元素。 p:only-of-type 选择属于其父元素唯一的 元素的每个 元素。 p:only-child 选择属于其父元素的唯一子元素的每个 元素。 p:nth-child(2) 选择属于其父元素的第二个子元素的每个 元素。 :enabled :disabled 控制表单控件的禁用状态。 :checked 单选框或复选框被选中。 多背景 rgba css3中唯一引入的伪元素::selection 媒体查询，多栏布局 必用点之居中常用： transform,绝对定位上左50%后，translate(-50%,-50%) 绝对定位后，上下左右0，margin:auto 子元素是有宽高或者宽高是被撑开时：父元素display：flex;justify-content:center;align-items:center;","categories":[],"tags":[{"name":"css","slug":"css","permalink":"http://yoursite.com/tags/css/"}]}]}