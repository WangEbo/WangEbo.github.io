{"meta":{"title":"王毅博的blog","subtitle":"源于热爱","description":"认知与成长","author":"王毅博","url":"http://yoursite.com"},"pages":[],"posts":[{"title":"闭包","slug":"闭包","date":"2017-07-29T15:55:02.000Z","updated":"2018-05-27T05:19:49.688Z","comments":true,"path":"2017/07/29/闭包/","link":"","permalink":"http://yoursite.com/2017/07/29/闭包/","excerpt":"","text":"在红宝书中是这样讲述闭包的： 有权访问另一个函数作用域内变量的函数 在《你不知道的JavaScript》中是这样描述的：当函数可以记住并访问所在的词法作用域时，就产生了闭包，即使函数是在当前词法作用域之外执行。 讲解闭包​ 先看一段代码 12345678function fn1() &#123; var name = &apos;iceman&apos;; function fn2() &#123; console.log(name); &#125; fn2();&#125;fn1(); 根据高程及权威指南的描述，上面代码已经形成了闭包，只是不太好观察 ​ 那么再看下面一段代码 123456789function fn1() &#123; var name = &apos;iceman&apos;; function fn2() &#123; console.log(name); &#125; return fn2;&#125;var fn3 = fn1();fn3(); 这就很清晰的展示了闭包 fn2的词法作用域能够访问到fn1的作用域 将fn2当做fn1返回值 fn1执行后，将fn2的引用赋值给fn3 执行fn3，输出变量name 正常来讲，当fn1函数执行完后，其作用域会被销毁，然后垃圾回收器会释放那段内存空间，但是闭包却神奇的让fn1的作用域存活了下来，是因为fn2依然次有该作用域的引用，而这个引用就是闭包 需要注意的是：对函数值的传递还可以使用其他方式诸如回调函数的形式 1234567891011function fn1() &#123; var name = &apos;iceman&apos;; function fn2() &#123; console.log(name); &#125; fn3(fn2);&#125;function fn3(fn) &#123; fn();&#125;fn1(); 在上例中，将fn1内部的fn2传参的形式传递给fn3，当它在fn3中被运行时，它依然可以访问到name变量 因此无论通过哪种方式将内部的函数传递到所在的词法作用域外，它都次有对原始作用域的引用，无论在何处执行，这个函数都会触发闭包 实例分析以上的例子会让人觉得有点学院派了，但是闭包绝不仅仅是一个无用的概念，你写过的代码当中肯定有闭包的身影，比如类似如下的代码： 123456function waitSomeTime(msg, time) &#123; setTimeout(function () &#123; console.log(msg) &#125;, time);&#125;waitSomeTime(&apos;hello&apos;, 1000); 定时器中有一个匿名函数，该匿名函数就有涵盖waitSomeTime函数作用域的闭包，因此当1秒之后，该匿名函数能输出msg。 另一个很经典的例子就是for循环中使用定时器延迟打印的问题： 12345for (var i = 1; i &lt;= 10; i++) &#123; setTimeout(function () &#123; console.log(i); &#125;, 1000);&#125; 在这段代码中，我们对其的预期是输出1~10，但却输出10次11。这是因为setTimeout中的匿名函数执行的时候，for循环都已经结束了，for循环结束的条件是i大于10，所以当然是输出10次11咯。 究其原因：i是声明在全局作用中的，定时器中的匿名函数也是执行在全局作用域中，那当然是每次都输出11了。 原因知道了，解决起来就简单了，我们可以让i在每次迭代的时候，都产生一个私有的作用域，在这个私有的作用域中保存当前i的值。 12345678for (var i = 1; i &lt;= 10; i++) &#123; (function () &#123; var j = i; setTimeout(function () &#123; console.log(j); &#125;, 1000); &#125;)();&#125; 这样就达到我们的预期了呀，让我们用一种比较优雅的写法改造一些，将每次迭代的i作为实参传递给自执行函数，自执行函数中用变量去接收： 1234567for (var i = 1; i &lt;= 10; i++) &#123; (function (j) &#123; setTimeout(function () &#123; console.log(j); &#125;, 1000); &#125;)(i);&#125; 闭包的应用： 定义私有变量，避免全局污染 123456789101112131415161718192021222324function module() &#123; var arr = []; function add(val) &#123; if (typeof val == &apos;number&apos;) &#123; arr.push(val); &#125; &#125; function get(index) &#123; if (index &lt; arr.length) &#123; return arr[index] &#125; else &#123; return null; &#125; &#125; return &#123; add: add, get: get &#125;&#125;var mod1 = module();mod1.add(1);mod1.add(2);mod1.add(&apos;xxx&apos;);console.log(mod1.get(2));","categories":[],"tags":[{"name":"闭包","slug":"闭包","permalink":"http://yoursite.com/tags/闭包/"},{"name":"作用域","slug":"作用域","permalink":"http://yoursite.com/tags/作用域/"},{"name":"作用域链","slug":"作用域链","permalink":"http://yoursite.com/tags/作用域链/"}]},{"title":"数组去重","slug":"数组去重","date":"2017-07-29T15:05:46.000Z","updated":"2018-05-27T04:57:49.131Z","comments":true,"path":"2017/07/29/数组去重/","link":"","permalink":"http://yoursite.com/2017/07/29/数组去重/","excerpt":"","text":"思路一，对象的属性的第二种写法 obj.[arr[i]] 1234567891011将数组的value作为一个新的空对象hsah的属性，将其赋值为true，并将value push至空数组result中：function unique(arr)&#123; var result =[],hash = &#123;&#125;; for (var i = 0,len = arr.length; i&lt;len; i++)&#123; if(!hash[arr[i]])&#123; hash[arr[i]] = true; result.push(arr[i]) &#125; &#125; return result;&#125; 思路二:indexOf方法 12345678910111213141516 function unique(arr)&#123; var result = []; for(var i=0; i&lt;arr.length; i++)&#123; if(arr.indexOf(arr[i]) == i)&#123; result.push(arr[i]); &#125; &#125; return result; &#125; 或function unique(arr)&#123; return arr.filter(function (item, index, self) &#123; return self.indexOf(item) === index; &#125;);&#125; ES6–你值得拥有 12345678function unique (arr) &#123; return Array.from(new Set(arr))&#125;function unique (arr) &#123; const seen = new Map() return arr.filter((a) =&gt; !seen.has(a) &amp;&amp; seen.set(a, 1))&#125;","categories":[],"tags":[{"name":"数组去重","slug":"数组去重","permalink":"http://yoursite.com/tags/数组去重/"}]},{"title":"继承","slug":"继承","date":"2017-05-27T05:00:26.000Z","updated":"2018-05-27T04:56:52.679Z","comments":true,"path":"2017/05/27/继承/","link":"","permalink":"http://yoursite.com/2017/05/27/继承/","excerpt":"","text":"借用构造函数（经典继承） 1234567891011121314151617181920原理：使用call,apply在子类型构造函数内部借用超类型函数function Father(name)&#123; this.name=name this.colors=[&apos;red&apos;,&apos;blue&apos;,&apos;green&apos;]&#125;function Son(name)&#123; Father.call(this,name)&#125;var p1=new Son(&apos;小明&apos;)p1.colors.push(&apos;black&apos;)alert p1.colors //[&apos;red&apos;,&apos;blue&apos;,&apos;green&apos;,&apos;black&apos;]var p2=new Father()alert p2.colors //[&apos;red&apos;,&apos;blue&apos;,&apos;green&apos;]有点： 可传参，原型链上的引用类型独立缺点： 原型上的方法在创建实例时需要重新创建，没有实现函数复用，解决方法：结合用原型链 组合继承（伪经典继承） 123456789101112131415161718192021222324252627282930313233思路：使用原型链实现对原型属性和方法的继承，通过借用构造函数来实现对实例属性的可传参改变function Father(name)&#123; this.name=name this.colors=[&apos;red&apos;,&apos;blue&apos;,&apos;green&apos;]&#125;//子类型的实例可以通过两次查找原型对象至超类型的原型对象来继承超类型的方法Father.prototype.sayName=function()&#123; console.log(this.name)&#125;//通过将子类型构造函数的原型对象指向Father实例来实现超类型的属性继承Son.prototype=new Father()Son.prototype.sayAge=function()&#123; alert(this.age)&#125;function Son(name,age)&#123; Father.call(this,name) this.age=age&#125;var p1=new Son(&apos;小高&apos;,23)p1.colors.push(&apos;black&apos;)console.log(p1.colors) //[&apos;red&apos;,&apos;blue&apos;,&apos;green&apos;,&apos;black&apos;]p1.sayName() //&apos;小高&apos;p1.sayAge //23var p2=new Son(&apos;小高&apos;,8)console.log(p2.colors) //[&apos;red&apos;,&apos;blue&apos;,&apos;green&apos;]p1.sayName() //&apos;小高&apos;p1.sayAge //8优点： 组合继承结合了原型链和借用构造函数的有点，是js中最常用的继承模式，而且instanceof和isPrototypeOf()都 能判断类型缺点： 调用了多次父类构造函数，一次是在创建子类型原型的时候, 另一次是在子类型构造函数内部. 原型式继承 1234567891011121314151617181920212223242526272829303132原型式继承的原理：定义一个函数object，这个构造函数有一个参数o，o将是超类型，在这个构造函数object内部，在object函数内部定义一个临时的构造函数F，然后将o赋值给F.prototype，再返回新创建的f实例对象obj1，如此一来，obj1就可以通过原型链来访问原型对象o的属性function object(o)&#123; var function F()&#123;&#125; F.prototype=o return new F()&#125;var person = &#123; friends : [&quot;Van&quot;,&quot;Louis&quot;,&quot;Nick&quot;]&#125;;var anotherPerson = object(person);anotherPerson.friends.push(&quot;Rob&quot;);var yetAnotherPerson = object(person);yetAnotherPerson.friends.push(&quot;Style&quot;);alert(person.friends);//&quot;Van,Louis,Nick,Rob,Style&quot;同样由于实例对象的friends是引用类型，原型对象中的friends遭到了更改**在ECMAScript5中，通过新增Object.create()方法规范化了上面的原型式继承**支持这个方法的浏览器有IE9+，firefox4+，safari5+，opera12+，chrome1.是要传入的原型对象 2.一个对象，需要定义的属性的配置，与Object.definedPrototy()方法的第二个参数格式相同如：var person=&#123; name:&apos;Van&apos;&#125;var p1=Object.create(person,&#123; name:&#123; value:&apos;louis&apos; &#125;&#125;)alert(anotherPerson.name) //louis 寄生式继承 123456789101112与原型式继承有很大相似，原理：在原型式继承的基础上，创建一个 **仅用于封装继承过程的函数**，该函数在内部来以某种方式增强对象，最后再像真的是它做了所有工作一样返回新对象例如，**在原型式继承的object函数和person对象已存在时**：function createAnother(original)&#123; var clone=object(original) clone.sayhi=function()&#123; console.log(&apos;hi&apos;) &#125; return clone&#125;寄生式继承创建的新对象不仅具有person(original)的所有属性和方法，并且还有sayhi方法，注意：这样来实现继承，会因为不能做到函数复用而导致效率降低 寄生组合式继承 123456789101112131415前面说过，组合继承是最常用的方式了，但是由于每次使用组合继承都会调用两次父类构造函数，因此就有了寄生组合式继承，实现思路： 不必为了指定子类型的原型而调用超类型的构造函数*同样在object函数已存在时*function object(o)&#123; function F()&#123;&#125; F.prototype = o; return new F();&#125;function extend(subClass,superClass)&#123; var prototype=object(superClass.prototype) prototype.constructor=subClass subClass.prototype=prototype&#125;相比组合继承，我们没有多次调用超类构造函数，而且，原型链没有发生改变，让我们看看下图 在寄生式组合继承中，在创建子类实例时（执行 new subCLass()）时，步骤如下 执行object，将F.prototype指向了superClass.prototype，因此之后的new F()的__proto__属性也指向superClass.prototype 用prototype变量来接收new F()，并将prototype的constructor属性指向subCLass 再将subClass.prototype指向prototype，如此，subCLass的实例对象的__proto__属性便也指向了prototype，这样一来，原型链也没有被修改","categories":[],"tags":[{"name":"js","slug":"js","permalink":"http://yoursite.com/tags/js/"},{"name":"继承","slug":"继承","permalink":"http://yoursite.com/tags/继承/"},{"name":"call","slug":"call","permalink":"http://yoursite.com/tags/call/"},{"name":"apply","slug":"apply","permalink":"http://yoursite.com/tags/apply/"},{"name":"原型","slug":"原型","permalink":"http://yoursite.com/tags/原型/"},{"name":"原型链","slug":"原型链","permalink":"http://yoursite.com/tags/原型链/"},{"name":"this","slug":"this","permalink":"http://yoursite.com/tags/this/"}]},{"title":"（instanceof、hasOwnProperty、in）创建对象及检测对象类型","slug":"（instanceof、hasOwnProperty、in）创建对象及检测对象类型","date":"2017-04-20T16:48:28.000Z","updated":"2018-05-27T05:10:02.304Z","comments":true,"path":"2017/04/21/（instanceof、hasOwnProperty、in）创建对象及检测对象类型/","link":"","permalink":"http://yoursite.com/2017/04/21/（instanceof、hasOwnProperty、in）创建对象及检测对象类型/","excerpt":"","text":"对象创建的演变 在将要涉及到面向对象开发之前，我们可能需要创建许多新对象，也许他们有许多共同点，那么这些创建对象的模式是如何演变的呢 instanceof 先了解instanceof person1 instanceof Person 操作符，它用来检测对象类型（实例对象是否是某个‘类‘的实例） hasOwnProperty() hasOwnProperty() obj.hasOwnProperty(&#39;atr_name&#39;)用来检测对象是否自身真正有某个属性，而不是通过原型链访问原型对象的 in操作符 in &quot;atr_name&quot;in obj 操作符在单独使用时，只用来判断对象是够可以读取某一个属性，不论来之自身或是原型链上的原型对象上，能则返回true，反之，返回false 详细解读各种模式及其优缺点 工厂模式 1234567891011121314151617function createPerson(name,age,job)&#123; var o=new Object() o.name=name o.age=age o.job=job o.sayName=function()&#123; console.log(this.name); &#125; return o&#125;var person1=createPerson(&apos;Nicolas&apos;,23,&apos;webber&apos;)var person2=createPerson(&apos;rose&apos;,22,&apos;ui&apos;)达到了需求缺点： - 无法检测对象的类型，因为都是Object - 每次创建一个新对象时，就保存了一个say方法，函数复用没有得到利用（因为有更好的解决办法） 构造函数模式 123456789101112131415161718function Person(name,age,job)&#123; this.name=name this.age=age this.job=job this.sayName=function()&#123; console.log(this.name); &#125; &#125; var person1=Object(&apos;Nicolas&apos;,23,&apos;webber&apos;) var person2=Object(&apos;rose&apos;,22,&apos;ui&apos;) 优点： - 可以通过constructor或instanceof来检测类型 alert(person1.constructor,person1 instanceof Object,person1 instanceof Person) 将输入true true true， 构造函数模式可以为实例对象添加一个特定类型标识，这正是它优于工厂模式的所在 缺点： say方法重复再内存中创建 原型模式 12345678910111213141516 //构造函数来存放简单类型 function Person()&#123;&#125;Person.prototype.name=&apos;Nicolas&apos; Person.prototype.sayName=function()&#123; console.log(this.name); &#125; Person.prototype.friends=[&apos;小明&apos;] var person1=new Person() var person2=Object() 优点： 如此，由于原型的关系，实例对象可以共同访问sayName方法，而this对象又很好的解决了标识符name指 向不同的问题 缺点： 无法传参 如果出现引用问题(下面继承也会讲到)，如：`person1.friends.push(&apos;小红&apos;)` 在执行打印person2.friends时，将会输出[&apos;小明&apos;,&apos;小红&apos;],而这不是我们所希望的结果 组合使用构造函数模式和原型模式 1234567891011121314151617//构造函数来存放简单类型 function Person(name,age,job)&#123; this.name=name this.age=age this.job=job //将可能要变化的引用类型放入构造函数中 this.friends=[&apos;小明&apos;] &#125; Person.prototype.sayName=fucntion()&#123; console.log(this.name); &#125; var person1=Object(&apos;Nicolas&apos;,23,&apos;webber&apos;) var person2=Object(&apos;rose&apos;,22,&apos;ui&apos;) //这是一种广泛认可的开发模式 注意： 通过字面量方式赋值给Person.prototype会导致constructor需要重新手动设置，并且会切断最初原型对象与实例对象之间的联系 动态原型模式 1234567891011121314151617实际上和（组合构造器和原型模式）差不多不过是 function Person(name,age,job)&#123; this.name=name this.age=age this.job=job //将可能要变化的引用类型放入构造函数中 this.friends=[&apos;小明&apos;] //不过只是在构造函数将所需的代码全包含了，而且原型对象的方法也只会在初次使用构造函数的时候添 加一次,当然只需要检测一个属性或者方法即可 if(this.sayName != &apos;function&apos;)&#123; Person.prototype.sayName=function()&#123; alert(this.name) &#125; &#125; &#125; 很完美了，不过.....QAQ，还是不能通过字面重写原型对象 寄生构造函数模式 12345678910111213141516171819202122232425function Person(name,age,job)&#123; var o=new Object() o.name=name o.sayName=function()&#123; console.log(this.name); &#125; return o &#125; var p1=new Person() 它与工厂模式别没有多大区别，只不过，他可以在特殊情况下为对象创建构造函数，如我们需要一个包含特殊方法的Array构造函数， function SpecialArray()&#123; var values=new Array() values.push.apply(values,arguments) //这里不能直接 values.push(arguments)吗 values.toPipedString=function()&#123; return this.join(&apos;|&apos;) &#125; return values &#125; var colors=new SpecialArray(&apos;red&apos;,&apos;blue&apos;,&apos;green) alert(colors.toPipedString) //&apos;red|blue|green&apos; 缺点： 它依然不能解决类型判断问题，instanceof无法解决 /？why ​ 稳妥构造函数模式 12 ​","categories":[],"tags":[{"name":"js","slug":"js","permalink":"http://yoursite.com/tags/js/"},{"name":"Object","slug":"Object","permalink":"http://yoursite.com/tags/Object/"},{"name":"es5","slug":"es5","permalink":"http://yoursite.com/tags/es5/"}]},{"title":"flex布局","slug":"flex布局","date":"2017-03-20T17:11:09.000Z","updated":"2018-05-27T05:07:21.744Z","comments":true,"path":"2017/03/21/flex布局/","link":"","permalink":"http://yoursite.com/2017/03/21/flex布局/","excerpt":"","text":"flex弹性布局，如何容器都能使用display属性指定为flex布局； 概念：采用flex布局的元素，简称“容器”；子容器将自动称为氢气成员（flex item） 容器模型 水平轴（main axis）的起始点(main start)和结束点(main end)；交叉轴(cross axis)的起始点(cross start)以及结束点(cross end)； 注意，设为 Flex 布局以后，子元素的float、clear和vertical-align属性将失效。 项目默认沿主轴排列，单个项目占据的主轴空间叫做main size，占据的交叉轴空间叫做cross size ​ 容器的6个属性 flex-direction flex-wrap flex-flow justify-content align-items align-content 容器属性详解 flex-direction属性决定主轴的方向，也就是排列方向 1234row(默认值)：水平方向左为起点row-reverse：水平方向右为起点column：垂直方向上为起点column-reverse：垂直方向下为起点 flex-wrap属性定义一排排满后如何换行 123nowrap(默认)：不换行wrap：换行，第一行在上方wrap-reverse：换行，第一行在下方 flex-flow属性是flex-direction和flex-wrap的简写形式默认值为 row nowrap 123.box&#123; flex-flow:&lt;flex-direciton&gt;||&lt;flex-wrap&gt;&#125; justify-content属性定义项目在主轴上的对其方式 123451.flex-start(默认值):左对齐2.flex-end：右对齐3.center：居中4.space-between：两端对齐，项目之间的间隔都相等5.space-around：每个项目两侧的间隔相等，因此项目之间的间隔比项目与边框的间隔大一倍 align-items属性定义项目在交叉轴上如何对齐 flex-start：与交叉轴的起点对齐 flex-end：与交叉轴的终点对齐 center：与交叉轴的中点对齐 baseline：项目的第一行文字的基线对齐 stretch：如果项目未设置高度或设为auto，将占满容器的高度 align-content属性定义多根轴线的对齐方式，如果项目只有一根轴线，该属性无效 项目的属性 order：定义项目的排列顺序，数值越小，排列越靠前，默认为0 felx-grow属性：定义项目的放大比例饿，默认为0，即如果存在剩余空间，项目也不放大，如果所有项目的flex-grow属性都为1，则它们将等分剩余空间（如果有的话）。如果一个项目的flex-grow属性为2，其他项目都为1，则前者占据的剩余空间将比其他项多一倍。 flex-shrink属性：定义项目的缩小比例，默认为1，级空间如果不足，则将项目缩小；但是如果一个项目的该属性为0，而其他的都为1，则空间不足时，缩小其他的，前者不缩小 flex-basis：属性定义了在分配多余空间之前，项目占据的主轴空间；浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为auto，即项目的本来大小。 flex：该属性是flex-grow，flex-shrink以及flex-basis的缩写，默认为0 1 auto，后两个属性可选（推荐选用该写法） align-self：属性允许单个项目与其他项目不一样的对齐方式，可以覆盖algin-items的值，默认为auto，表示继承align-items属性，如果没有父元素，则等同于stretch","categories":[],"tags":[{"name":"css","slug":"css","permalink":"http://yoursite.com/tags/css/"},{"name":"布局","slug":"布局","permalink":"http://yoursite.com/tags/布局/"},{"name":"flex","slug":"flex","permalink":"http://yoursite.com/tags/flex/"}]},{"title":"递归与深拷贝","slug":"递归与深拷贝","date":"2017-03-11T12:03:27.000Z","updated":"2018-05-27T05:15:59.761Z","comments":true,"path":"2017/03/11/递归与深拷贝/","link":"","permalink":"http://yoursite.com/2017/03/11/递归与深拷贝/","excerpt":"","text":"递归原理 递归原理：递归原理：函数内部调用函数本身 递归实现 实现深拷贝常用的两种方法： 迭代递归法 序列化反序列化法 如，这是我们的测试对象 123456789101112131415161718let test = &#123; num: 0, str: &apos;&apos;, boolean: true, unf: undefined, nul: null, obj: &#123; name: &apos;我是一个对象&apos;, id: 1 &#125;, arr: [0, 1, 2], func: function() &#123; console.log(&apos;我是一个函数&apos;) &#125;, date: new Date(0), reg: new RegExp(&apos;/我是一个正则/ig&apos;), err: new Error(&apos;我是一个错误&apos;)&#125; 方法一： 123456789101112131415161718// 判断是否为对象function isObject(o) &#123; return (typeof o === &apos;object&apos; || typeof o === &apos;function&apos;) &amp;&amp; o !== null&#125;// 迭代递归法：深拷贝对象与数组function deepClone(obj) &#123; if (!isObject(obj)) &#123; throw new Error(&apos;obj 不是一个对象！&apos;) &#125; let isArray = Array.isArray(obj) let cloneObj = isArray ? [] : &#123;&#125; for (let key in obj) &#123; cloneObj[key] = isObject(obj[key]) ? deepClone(obj[key]) : obj[key] &#125; return cloneObj&#125; 扩展 方法二： 掘金上的分享","categories":[],"tags":[{"name":"函数","slug":"函数","permalink":"http://yoursite.com/tags/函数/"},{"name":"arguments","slug":"arguments","permalink":"http://yoursite.com/tags/arguments/"},{"name":"递归，深拷贝","slug":"递归，深拷贝","permalink":"http://yoursite.com/tags/递归，深拷贝/"}]},{"title":"原型链","slug":"原型链","date":"2017-01-21T16:43:54.000Z","updated":"2018-05-27T05:17:57.738Z","comments":true,"path":"2017/01/22/原型链/","link":"","permalink":"http://yoursite.com/2017/01/22/原型链/","excerpt":"","text":"先看原型你必须知道的概念：无论何时，只要创建了一个新函数，就会根据一组特定的规则 为该函数创建一个prototype属性，这个属性即指向函数的原型对象，并且默认情况下，这个原型对象会自动获得一个constructor属性，这个属性指向这个新函数，因此我们可以通过（如下图Person函数，）Person.prototype来添加属性或方法，而在通过Person创建一个新实例后，实例上有一个[[prototype]]指针指向原型对象，在chrome、Safari、FireFox中可以通过__proto__来访问 原型的一些特点 实例对象可以访问到原型对象中的静态成员（ person1.constructor同样也是访问的原型对象中的） 实例对象中添加的属性如果与原型对象相同，那么则会屏蔽原型对象中的改属性，实例对象单独添加该属性，对原型对象无影响 由于第一条特点的原因，我们有时候需要通过hasOwnProperty来判断实例对象中是否真正含有某一属性 当然为了便捷，ECMAscript5就提供了hasPrototypeProperty方法用来检测实例对象要访问的某属性是否只存在于原型对象而不存在于其自身，语法hasPrototypeProperty(obj,&#39;attr_name&#39;)，返回一个bool值 for-in只能遍历可枚举的属性 原型的动态性（重要特点，栈与堆将非常有助于理解这一特点） 由于实力对象查找原型对象中的属性是一次搜索，因此，我们可以动态的为原型对象添加属性或方法，而后再通过实例对象来访问，如 12345var p1=new Person()Person.prototype.sayHi=function()&#123; alert(&apos;hi&apos;)&#125;friend,sayHi() // &apos;hi&apos; (没有任何问题) 请谨记，实例对象与构造器之间，是没有任何指针的，它是通过原型对象中的constructor属性来访问构造器的，因此，如果我们完全通过Person.prototype完全重写”我们将需要的原型对象”，那么就相当于，我们 切断了最初原型对象与构造器之间的唯一关系，这是因为，通过Person.prototype={}（一个新的对象字面量）的形式，使得构造器Person的prototype属性的指针发生了改变，指向了我们新开辟内存创建的新对象“{}” 123456789101112function Person()&#123;&#125;var p1=new Person()Person.prototype=&#123; constructor:Person //如果需要通过constructor来判断类型，我们需要手动添加这个属性来打到预期 name:&apos;Nicolas&apos;&#125;console.log(friend.name) //error ,由于这是 = 赋值操作符，改变了Person.prototype的指针，指向了内存中的&#123; constructor:Person name:&apos;Nicolas&apos;&#125;这个对象，而p1的[[prototype]]属性是在`var p1=new Person()`这一步操作之后产生的原型对象，而此时的原型对象不包含name属性，因此报错 原生对象的原型 原生对象Array、String、object等都是采用原型模式创建的，因此可以随时给他们添加新方法 原型链","categories":[],"tags":[{"name":"js","slug":"js","permalink":"http://yoursite.com/tags/js/"},{"name":"原型","slug":"原型","permalink":"http://yoursite.com/tags/原型/"},{"name":"原型链","slug":"原型链","permalink":"http://yoursite.com/tags/原型链/"}]},{"title":"html","slug":"html","date":"2016-11-23T07:45:48.000Z","updated":"2018-05-27T04:58:41.699Z","comments":true,"path":"2016/11/23/html/","link":"","permalink":"http://yoursite.com/2016/11/23/html/","excerpt":"","text":"图片与文字组合使用时，如何使图片与文字垂直居中？ 给图片设置vertical-algin:center;并给文字以及其父元素高度相同的行高 什么是bfc？ Block Format Context(块级格式化上下文)，它是一个独立渲染区域，只有Block-level box参与，它规定了内部的Block-level box布局规则，并与这个区域外部毫不相干 inline-block中的空格部分是什么？其实是html中的空白字符；li标签不闭合可以解决中间有间距，浏览器会自动补齐闭合li标签；或者给li添加负的边距； 给父元素font-size：0；也可以清除其中的空白 h5新特性 h5缓存sessionstorage/localstorage/cookie","categories":[],"tags":[{"name":"html","slug":"html","permalink":"http://yoursite.com/tags/html/"},{"name":"h5","slug":"h5","permalink":"http://yoursite.com/tags/h5/"}]},{"title":"css","slug":"css","date":"2016-11-16T16:27:02.000Z","updated":"2018-05-27T04:58:57.526Z","comments":true,"path":"2016/11/17/css/","link":"","permalink":"http://yoursite.com/2016/11/17/css/","excerpt":"","text":"css 可继承的属性有哪些？ 常用的： 字体系列属性：font组合写法，font-weight，font-size，font-style，font-variant，color，text-indent css优先级（权重） !important &gt; id &gt; class &gt; tag important 比 内联优先级高,但内联比 id 要高 css选择器，建议没事去逛逛玩W3Ccss3新特性 border-radius、box-shadow、text-shadow、gradient 变形：transform：rotate | scale | translate | skew 选择器新增： p:first-of-type 选择属于其父元素的首个 元素的每个 元素。 p:last-of-type 选择属于其父元素的最后 元素的每个 元素。 p:only-of-type 选择属于其父元素唯一的 元素的每个 元素。 p:only-child 选择属于其父元素的唯一子元素的每个 元素。 p:nth-child(2) 选择属于其父元素的第二个子元素的每个 元素。 :enabled :disabled 控制表单控件的禁用状态。 :checked 单选框或复选框被选中。 多背景 rgba css3中唯一引入的伪元素::selection 媒体查询，多栏布局 必用点之居中常用： transform,绝对定位上左50%后，translate(-50%,-50%) 绝对定位后，上下左右0，margin:auto 子元素是有宽高或者宽高是被撑开时：父元素display：flex;justify-content:center;align-items:center;","categories":[],"tags":[{"name":"css","slug":"css","permalink":"http://yoursite.com/tags/css/"}]}]}